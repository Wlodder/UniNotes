= Tarjan's Algorithm =

The idea is to give every vertex an 'index' and 'lowlink' properties. We also keep two global variables: 'index (gindex here) and a stack.

{{{python

def strongConnect(v):
	v.index = index
	v.lowlink = index
	index += 1
	stack.push(v)
	# procesws the daugheters
	# Almost a DFS
	for w in G.edges(v):
		if w.index == None:
			strongConnect(w)
			v.lowlink = min(v.lowlink, w.lowlink)
		if w == stack.top():
			v.lowlink = min(v.lowlink, w.index)
	if v.lowlink == v.index:
		do {
			w = stack.pop()
			current_strong_connect_component.add(w)
		} while w != v
		print(current_strong_connect_component)

}}}

The intuition behind the 'lowlink' variable is that is provides the furthest back ancestor that is reachable by the current strongly connected component.
Since we are using a stack to record our nodes for the current strongly connected component we essentially reverse the order until we reach the greatest ancestor (v.lowlink) after which we know that we've added all of the nodes to the current_strong_connect_component that belong there.
